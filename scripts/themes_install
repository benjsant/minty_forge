#!/usr/bin/env bash
# MintyForge – Universal Theme Installer (Cinnamon edition)
# Linux Mint 22 – Bash script with debugging helpers

set -euo pipefail

# -----------------------------------------------------------------
# Couleurs (si le terminal supporte le texte coloré)
# -----------------------------------------------------------------
if [ -t 1 ]; then
    GREEN="\e[32m"
    YELLOW="\e[33m"
    BLUE="\e[34m"
    RED="\e[31m"
    RESET="\e[0m"
else
    GREEN=""
    YELLOW=""
    BLUE=""
    RED=""
    RESET=""
fi

info()    { echo -e "${BLUE}[INFO]${RESET} $*"; }
success() { echo -e "${GREEN}[OK]${RESET} $*"; }
warn()    { echo -e "${YELLOW}[WARN]${RESET} $*"; }
error()   { echo -e "${RED}[ERROR]${RESET} $*"; }

# -----------------------------------------------------------------
# Détection de l'utilisateur actif
# -----------------------------------------------------------------
USER_NAME=$(who | awk '{print $1}' | head -n1)
USER_HOME=$(eval echo "~$USER_NAME")
if [[ -z $USER_NAME ]]; then
    error "Impossible de détecter l'utilisateur."
    exit 1
fi
info "Utilisateur détecté : $USER_NAME ($USER_HOME)"

# -----------------------------------------------------------------
# Chemins
# -----------------------------------------------------------------
CONFIG_DIR="./configs"
THEMES_DIR="./themes"
ICONS_DIR="./icons"
CURSORS_DIR="./cursors"
DCONF_FILE="$CONFIG_DIR/dconf_base"
SLICK_CONF="/etc/lightdm/slick-greeter.conf"

mkdir -p "$THEMES_DIR" "$ICONS_DIR" "$CURSORS_DIR"

# -----------------------------------------------------------------
# Chargement du dconf de base (si présent)
# -----------------------------------------------------------------
if [[ -f "$DCONF_FILE" ]]; then
    info "Chargement du fichier dconf de base…"
    sudo -u "$USER_NAME" DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u $USER_NAME)/bus" \
        dconf load / < "$DCONF_FILE"
    success "dconf de base chargé."
else
    warn "Fichier dconf de base introuvable – passage."
fi

# -----------------------------------------------------------------
# Fonction d'affichage de la liste des thèmes
# -----------------------------------------------------------------
# $1 = fichier de configuration (ex. themes_gtk.txt)
# $2 = type affiché (GTK, Icons, Cursor)
list_themes() {
    local file=$1 type=$2
    local -a names urls
    local i=1

    if [[ ! -f "$file" ]]; then
        error "Fichier de thèmes $file introuvable."
        exit 1
    fi

    info "Thèmes $type disponibles :"
    while IFS="|" read -r name url cmd_user cmd_root; do
        [[ -z $name ]] && continue
        printf "  %2d) %s\n" "$i" "$name"
        names[$i]="$name"
        urls[$i]="$url|$cmd_user|$cmd_root"
        ((i++))
    done < "$file"

    # boucle de validation du choix
    local choice
    while true; do
        read -p "Choisissez un thème $type (numéro) : " choice
        if [[ $choice =~ ^[0-9]+$ ]] && (( choice > 0 && choice < i )); then
            echo "${names[$choice]}|${urls[$choice]}"
            return 0
        else
            warn "Numéro invalide – réessayez."
        fi
    done
}

# -----------------------------------------------------------------
# Sélection des thèmes
# -----------------------------------------------------------------
GTK_INFO=$(list_themes "$CONFIG_DIR/themes_gtk.txt" "GTK")
ICON_INFO=$(list_themes "$CONFIG_DIR/themes_icons.txt" "Icons")
CURSOR_INFO=$(list_themes "$CONFIG_DIR/themes_cursors.txt" "Cursor")

IFS='|' read -r GTK_THEME GTK_URL GTK_CMD_USER GTK_CMD_ROOT <<< "$GTK_INFO"
IFS='|' read -r ICON_THEME ICON_URL ICON_CMD_USER ICON_CMD_ROOT <<< "$ICON_INFO"
IFS='|' read -r CURSOR_THEME CURSOR_URL CURSOR_CMD_USER CURSOR_CMD_ROOT <<< "$CURSOR_INFO"

info "Thème GTK choisi : $GTK_THEME"
info "Thème icônes choisi : $ICON_THEME"
info "Thème curseur choisi : $CURSOR_THEME"

# -----------------------------------------------------------------
# Fonction d'installation d'un thème (clone + commandes)
# -----------------------------------------------------------------
install_theme() {
    local name=$1 url=$2 cmd_user=$3 cmd_root=$4 target_dir=$5

    # Clone si besoin
    if [[ -n $url && ! -d "$target_dir" ]]; then
        info "Clonage de $name…"
        git clone --depth=1 "$url" "$target_dir" 2>git_err.log || {
            error "Échec du clone de $name : $(cat git_err.log)"
            exit 1
        }
        success "Clonage terminé."
    else
        warn "Répertoire $target_dir déjà présent – pas de clone."
    fi

    # Propriété du répertoire (évite les problèmes sudo)
    sudo chown -R "$USER_NAME":"$USER_NAME" "$target_dir"

    # Commande user
    if [[ -n $cmd_user ]]; then
        info "Exécution de la commande d'installation (user) pour $name…"
        (cd "$target_dir" && eval "$cmd_user") 2>user_err.log || {
            error "Erreur user pour $name : $(cat user_err.log)"
            exit 1
        }
        success "Installation user terminée."
    fi

    # Commande root
    if [[ -n $cmd_root ]]; then
        info "Exécution de la commande d'installation (root) pour $name…"
        (cd "$target_dir" && sudo bash -c "$cmd_root") 2>root_err.log || {
            error "Erreur root pour $name : $(cat root_err.log)"
            exit 1
        }
        success "Installation root terminée."
    fi
}

# -----------------------------------------------------------------
# Installation des trois catégories
# -----------------------------------------------------------------
install_theme "$GTK_THEME"   "$GTK_URL"   "$GTK_CMD_USER"   "$GTK_CMD_ROOT"   "$THEMES_DIR/$GTK_THEME"
install_theme "$ICON_THEME"  "$ICON_URL"  "$ICON_CMD_USER"  "$ICON_CMD_ROOT"  "$ICONS_DIR/$ICON_THEME"
install_theme "$CURSOR_THEME" "$CURSOR_URL" "$CURSOR_CMD_USER" "$CURSOR_CMD_ROOT" "$CURSORS_DIR/$CURSOR_THEME"

# -----------------------------------------------------------------
# Récupération du bus DBus du compte cible (plus fiable)
# -----------------------------------------------------------------
USER_DBUS=$(sudo -u "$USER_NAME" dbus-launch --sh-syntax |
            grep -E '^DBUS_SESSION_BUS_ADDRESS' |
            cut -d= -f2-)
export DBUS_SESSION_BUS_ADDRESS=$USER_DBUS
export DISPLAY=:0   # nécessaire pour gsettings

# -----------------------------------------------------------------
# Application des thèmes via gsettings (Cinnamon)
# -----------------------------------------------------------------
apply_gsettings() {
    local schema=$1 key=$2 value=$3
    info "Application de $key → $value"
    sudo -u "$USER_NAME" \
        gsettings set "$schema" "$key" "$value" 2>gsettings_err.log || {
        error "gsettings échoué pour $key : $(cat gsettings_err.log)"
        exit 1
    }
    success "$key appliqué."
}

apply_gsettings org.cinnamon.desktop.interface gtk-theme   "$GTK_THEME"
apply_gsettings org.cinnamon.desktop.interface icon-theme  "$ICON_THEME"
apply_gsettings org.cinnamon.desktop.interface cursor-theme "$CURSOR_THEME"
# Schéma correct sous Mint 22
apply_gsettings org.cinnamon.desktop.wm.preferences theme "$GTK_THEME"

# -----------------------------------------------------------------
# Vérification des valeurs appliquées
# -----------------------------------------------------------------
verify_theme() {
    local schema=$1 key=$2 expected=$3
    local current
    current=$(sudo -u "$USER_NAME" \
        gsettings get "$schema" "$key" 2>/dev/null | tr -d "'")
    if [[ $current == "$expected" ]]; then
        success "Vérif : $key = $expected"
    else
        warn "Vérif : $key attendu $expected, obtenu $current"
    fi
}

verify_theme org.cinnamon.desktop.interface gtk-theme   "$GTK_THEME"
verify_theme org.cinnamon.desktop.interface icon-theme  "$ICON_THEME"
verify_theme org.cinnamon.desktop.interface cursor-theme "$CURSOR_THEME"
verify_theme org.cinnamon.desktop.wm.preferences theme   "$GTK_THEME"

# -----------------------------------------------------------------
# Mise à jour du greeter LightDM (slick-greeter)
# -----------------------------------------------------------------
if ! command -v crudini >/dev/null; then
    warn "crudini absent – installation automatique."
    sudo apt-get update && sudo apt-get install -y crudini
fi


